/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class AppTest {

    @BeforeEach
    public void setUp() {
        // Clear recipes list before each test
        App.recipes.clear();
    }

    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    public void test_Parser() {
        String line = "Recipe Name,\"Ingredient1, Ingredient2\",Step 1,30";
        String[] expected = {"Recipe Name", "\"Ingredient1, Ingredient2\"", "Step 1", "30"};
        String[] result = App.parseLine(line);
        assertArrayEquals(expected, result, "parseLine method should correctly split the CSV line.");
    }

    @Test
    public void test_Match_Full() {
        Recipe recipe = new Recipe("Pasta", "Tomato, Pasta, Cheese", "Cook pasta", 20);
        List<String> fridgeIngredients = Arrays.asList("Tomato", "Pasta", "Cheese");

        double matchPercentage = App.calculateMatchPercentage(recipe, fridgeIngredients);
        assertEquals(100.0, matchPercentage, 0.1, "percentage should be 100% for full match.");
    }

    @Test
    public void test_Match_Partial() {
        Recipe recipe = new Recipe("Pasta", "Tomato, Pasta, Cheese", "Cook pasta", 20);
        List<String> fridgeIngredients = Arrays.asList("Tomato", "Cheese");

        double matchPercentage = App.calculateMatchPercentage(recipe, fridgeIngredients);
        assertEquals(66.67, matchPercentage, 0.1, "percentage should be 66.67% for partial match.");
    }

    @Test
    public void test_Match_NoMatch() {
        Recipe recipe = new Recipe("Pasta", "Tomato, Pasta, Cheese", "Cook pasta", 20);
        List<String> fridgeIngredients = Arrays.asList("Bread", "Butter");

        double matchPercentage = App.calculateMatchPercentage(recipe, fridgeIngredients);
        assertEquals(0.0, matchPercentage, 0.1, "percentage should be 0% for no match.");
    }

    @Test
    public void test_Match_Order() {
        // Add recipes
        App.recipes.add(new Recipe("Recipe 1", "Tomato, Pasta", "Step 1", 20));
        App.recipes.add(new Recipe("Recipe 2", "Cheese, Bread", "Step 2", 15));
        App.recipes.add(new Recipe("Recipe 3", "Butter, Tomato", "Step 3", 10));

        List<String> fridgeIngredients = Arrays.asList("Tomato", "Pasta", "Cheese");

        List<RecipeMatch> matches = App.matchedRecipes(fridgeIngredients);

        // Validate that matches are sorted by match percentage
        assertEquals("Recipe 1", matches.get(0).getRecipe().getName(), "The first match should have the highest percentage.");
        assertEquals("Recipe 2", matches.get(1).getRecipe().getName(), "The second match should have the next highest percentage.");
        assertEquals("Recipe 3", matches.get(2).getRecipe().getName(), "The third match should follow.");
    }

    @Test
    public void test_LoadRecipes_validInput() {
        App.loadRecipes();

        assertFalse(App.recipes.isEmpty(), "Recipes should be loaded");
    }

    @Test
    public void test_LoadRecipes_ExceptionHandling() {
        assertDoesNotThrow(() -> App.loadRecipes(), "Exception not given for wrong file.");
    }

}
